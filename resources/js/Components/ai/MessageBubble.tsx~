import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import ReactMarkdown from 'react-markdown';
import { Share2, Download, X, Copy, Check, Presentation, User, MoreHorizontal, MessageSquare, ThumbsUp, Sparkles } from 'lucide-react';
import html2canvas from 'html2canvas';
import { PowerPointService } from '@/Components/ai/PresentationService';
import { Button } from "@/Components/ui/button";
import { useToast } from '@/Components/ui/use-toast';
import { Avatar, AvatarFallback, AvatarImage } from "@/Components/ui/avatar";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
    DropdownMenuSeparator
} from "@/Components/ui/dropdown-menu";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/Components/ui/tooltip";

interface MessageBubbleProps {
    message: {
        role: 'user' | 'assistant';
        content: string;
        timestamp: Date;
        isLatest?: boolean;
    };
    onReaction?: (type: 'like' | 'save') => void;
}

export const MessageBubble: React.FC<MessageBubbleProps> = ({ message, onReaction }) => {
    const isUser = message.role === 'user';
    const [displayedContent, setDisplayedContent] = useState(isUser ? message.content : '');
    const [isTypingComplete, setIsTypingComplete] = useState(isUser);
    const [showShareOptions, setShowShareOptions] = useState(false);
    const [generatedImage, setGeneratedImage] = useState<string | null>(null);
    const [copied, setCopied] = useState(false);
    const [liked, setLiked] = useState(false);
    const [saved, setSaved] = useState(false);
    const [isGeneratingPPTX, setIsGeneratingPPTX] = useState(false);
    const [isPPTXSuccess, setIsPPTXSuccess] = useState(false);
    const [highlight, setHighlight] = useState(false);
    const [showReactions, setShowReactions] = useState(false);
    const messageRef = useRef<HTMLDivElement>(null);
    const bubbleRef = useRef<HTMLDivElement>(null);
    const { toast } = useToast();

    // Animation subtile pour attirer l'attention sur le dernier message
    useEffect(() => {
        if (message.isLatest && !isUser && isTypingComplete) {
            setHighlight(true);
            const timer = setTimeout(() => setHighlight(false), 1500);
            return () => clearTimeout(timer);
        }
    }, [isTypingComplete, message.isLatest, isUser]);

    // Fonction pour détecter et extraire du JSON valide pour une présentation PowerPoint
    const extractPresentationJson = (content: string) => {
        try {
            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (!jsonMatch) return null;

            const jsonStr = jsonMatch[0];
            const data = JSON.parse(jsonStr);

            if (data && data.slides && data.title) {
                if (Array.isArray(data.slides)) {
                    data.slides = data.slides.map(slide => {
                        if (slide.content && !Array.isArray(slide.content)) {
                            slide.content = [slide.content];
                        }
                        return slide;
                    });
                }
                return JSON.stringify(data);
            }
            return null;
        } catch (e) {
            console.error('Error parsing presentation JSON:', e);
            return null;
        }
    };

    // Fonction pour masquer le JSON des présentations dans l'affichage
    const cleanContentForDisplay = (content: string) => {
        try {
            const jsonMatch = content.match(/\{[\s\S]*\}/);
            if (!jsonMatch) return content;

            const jsonStr = jsonMatch[0];
            const data = JSON.parse(jsonStr);

            if (data && data.slides && data.title) {
                return content.replace(jsonMatch[0], '').trim();
            }
            return content;
        } catch (e) {
            return content;
        }
    };

    // Animation d'écriture améliorée avec effet de vitesse variable
    useEffect(() => {
        if (isUser || !message.isLatest) {
            setDisplayedContent(message.content);
            setIsTypingComplete(true);
            return;
        }

        const cleanContent = cleanContentForDisplay(message.content);
        setDisplayedContent('');
        setIsTypingComplete(false);

        // Vitesse d'écriture variable selon la longueur du message
        const baseSpeed = 10;
        const contentLength = cleanContent.length;
        let dynamicSpeed = Math.max(1, Math.min(10, baseSpeed - Math.floor(contentLength / 500)));

        // Effet de pause naturelle à certains caractères (., !, ?, :)
        let currentIndex = 0;
        let pauseTime = 0;

        const typingInterval = setInterval(() => {
            if (pauseTime > 0) {
                pauseTime--;
                return;
            }

            // Accélération progressive pour les messages très longs
            if (currentIndex > 1000) dynamicSpeed = Math.min(15, dynamicSpeed + 1);

            const charsPerIteration = Math.floor(Math.random() * dynamicSpeed) + 1;
            const nextIndex = Math.min(currentIndex + charsPerIteration, cleanContent.length);

            setDisplayedContent(cleanContent.substring(0, nextIndex));

            // Vérifier s'il faut une pause naturelle
            const lastChar = cleanContent[nextIndex - 1];
            if (['.', '!', '?'].includes(lastChar) && cleanContent[nextIndex] === ' ') {
                pauseTime = 3; // Pause après fin de phrase
            } else if ([',', ';', ':'].includes(lastChar)) {
                pauseTime = 1; // Petite pause après virgule, etc.
            }

            currentIndex = nextIndex;

            if (currentIndex >= cleanContent.length) {
                clearInterval(typingInterval);
                setTimeout(() => setIsTypingComplete(true), 300);
            }
        }, 8);

        return () => clearInterval(typingInterval);
    }, [isUser, message.content, message.isLatest]);

    const handleCopy = async () => {
        try {
            await navigator.clipboard.writeText(cleanContentForDisplay(message.content));
            setCopied(true);
            toast({
                title: "Contenu copié",
                description: "Le texte a été copié dans le presse-papiers",
                duration: 2000,
            });
            setTimeout(() => setCopied(false), 2000);
        } catch (err) {
            console.error('Échec de la copie:', err);
            toast({
                title: "Échec de la copie",
                description: "Impossible de copier le texte",
                variant: "destructive",
                duration: 2000,
            });
        }
    };

    const handleReaction = (type: 'like' | 'save') => {
        if (type === 'like') {
            setLiked(!liked);

            // Animation de confetti lorsqu'on like
            if (!liked && bubbleRef.current) {
                const rect = bubbleRef.current.getBoundingClientRect();
                const x = rect.left + rect.width / 2;
                const y = rect.top;

                createConfetti(x, y);
            }
        } else {
            setSaved(!saved);
        }

        if (onReaction) onReaction(type);

        toast({
            title: type === 'like'
                ? liked ? "J'aime retiré" : "Message apprécié !"
                : saved ? "Message retiré" : "Message sauvegardé",
            description: type === 'like'
                ? liked ? "Vous n'aimez plus ce message" : "Merci pour votre retour positif"
                : saved ? "Message retiré de vos favoris" : "Vous retrouverez ce message dans vos favoris",
            duration: 2000,
        });
    };

    // Fonction pour créer un effet de confetti
    const createConfetti = (x: number, y: number) => {
        const container = document.createElement('div');
        container.style.position = 'fixed';
        container.style.left = `${x}px`;
        container.style.top = `${y}px`;
        container.style.width = '0';
        container.style.height = '0';
        container.style.pointerEvents = 'none';
        container.style.zIndex = '9999';
        document.body.appendChild(container);

        const colors = ['#4F46E5', '#818CF8', '#A5B4FC', '#38BDF8', '#7DD3FC'];

        for (let i = 0; i < 30; i++) {
            const confetti = document.createElement('div');
            const size = Math.random() * 8 + 4;

            confetti.style.position = 'absolute';
            confetti.style.width = `${size}px`;
            confetti.style.height = `${size}px`;
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.borderRadius = Math.random() > 0.5 ? '50%' : '3px';
            confetti.style.opacity = '0';
            confetti.style.transform = 'translate(-50%, -50%)';
            confetti.style.transition = `all ${Math.random() * 1 + 0.5}s ease-out`;

            container.appendChild(confetti);

            // Animation initiale
            setTimeout(() => {
                const angle = Math.random() * Math.PI * 2;
                const velocity = Math.random() * 100 + 50;
                const translateX = Math.cos(angle) * velocity;
                const translateY = Math.sin(angle) * velocity - 100; // Direction vers le haut

                confetti.style.opacity = (Math.random() * 0.5 + 0.5).toString();
                confetti.style.transform = `translate(calc(-50% + ${translateX}px), calc(-50% + ${translateY}px)) rotate(${Math.random() * 360}deg)`;
            }, 0);

            // Disparition
            setTimeout(() => {
                confetti.style.opacity = '0';
            }, Math.random() * 1000 + 500);
        }

        // Nettoyage
        setTimeout(() => {
            document.body.removeChild(container);
        }, 2000);
    };

    const handleGeneratePPTX = async () => {
        const jsonData = extractPresentationJson(message.content);
        if (!jsonData) return;

        try {
            setIsGeneratingPPTX(true);

            let parsedData;
            try {
                parsedData = JSON.parse(jsonData);
                if (!parsedData.slides || !parsedData.title) {
                    throw new Error('Structure JSON invalide pour la présentation');
                }
            } catch (parseError) {
                console.error('Error parsing JSON:', parseError);
                toast({
                    title: "Format invalide",
                    description: "Le contenu n'est pas dans le format attendu pour une présentation",
                    variant: "destructive"
                });
                setIsGeneratingPPTX(false);
                return;
            }

            const pptxBlob = await PowerPointService.generateFromJSON(jsonData);

            const contextId = typeof message.timestamp === 'string'
                ? message.timestamp
                : new Date(message.timestamp).getTime().toString();

            const url = window.URL.createObjectURL(pptxBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = `presentation-${contextId}.pptx`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);

            setIsPPTXSuccess(true);
            setTimeout(() => setIsPPTXSuccess(false), 3000);

            toast({
                title: "Présentation prête",
                description: "Votre fichier PowerPoint a été généré avec succès",
                duration: 3000,
            });
        } catch (error) {
            console.error('Error generating presentation:', error);
            toast({
                title: "Erreur",
                description: `Problème lors de la génération: ${error.message || "Erreur inconnue"}`,
                variant: "destructive"
            });
        } finally {
            setIsGeneratingPPTX(false);
        }
    };

    const handleShare = async () => {
        if (!messageRef.current) return;

        setShowShareOptions(true);

        try {
            messageRef.current.classList.add('share-image-style');

            const canvas = await html2canvas(messageRef.current, {
                backgroundColor: null,
                scale: 2,
                logging: false,
                allowTaint: true,
                useCORS: true
            });

            const decoratedCanvas = document.createElement('canvas');
            const ctx = decoratedCanvas.getContext('2d');

            if (!ctx) return;

            // Dimensions améliorées pour le partage
            decoratedCanvas.width = canvas.width + 100;
            decoratedCanvas.height = canvas.height + 140;

            // Fond avec dégradé subtil
            const gradient = ctx.createLinearGradient(0, 0, 0, decoratedCanvas.height);
            gradient.addColorStop(0, '#ffffff');
            gradient.addColorStop(1, '#f9fafb');
            ctx.fillStyle = gradient;
            ctx.fillRect(0, 0, decoratedCanvas.width, decoratedCanvas.height);

            // Bordure élégante avec ombre
            ctx.save();
            ctx.shadowColor = 'rgba(0, 0, 0, 0.12)';
            ctx.shadowBlur = 12;
            ctx.shadowOffsetX = 0;
            ctx.shadowOffsetY = 3;
            ctx.fillStyle = '#ffffff';
            ctx.roundRect(15, 15, decoratedCanvas.width - 30, decoratedCanvas.height - 30, 20);
            ctx.fill();
            ctx.restore();

            // Bordure fine
            ctx.strokeStyle = '#e9ecef';
            ctx.lineWidth = 1;
            ctx.roundRect(15, 15, decoratedCanvas.width - 30, decoratedCanvas.height - 30, 20);
            ctx.stroke();

            // Position du contenu
            ctx.drawImage(canvas, 50, 50);

            // Logo et signature plus professionnels
            ctx.fillStyle = '#374151';
            ctx.font = 'bold 16px Inter, system-ui, sans-serif';
            ctx.fillText('Conseiller de Carrière IA • Guidy', 50, decoratedCanvas.height - 50);

            // Ajouter un petit logo
            const logo = new Image();
            logo.src = '/guidy-logo.png'; // Assurez-vous d'avoir ce logo
            logo.onload = () => {
                ctx.drawImage(logo, decoratedCanvas.width - 120, decoratedCanvas.height - 70, 40, 40);

                const imgData = decoratedCanvas.toDataURL('image/png');
                setGeneratedImage(imgData);
            };

            // Au cas où l'image ne se charge pas
            setTimeout(() => {
                if (!generatedImage) {
                    const imgData = decoratedCanvas.toDataURL('image/png');
                    setGeneratedImage(imgData);
                }
            }, 500);

            messageRef.current.classList.remove('share-image-style');

        } catch (error) {
            console.error('Erreur lors de la génération de l\'image:', error);
            setShowShareOptions(false);
            toast({
                title: "Échec du partage",
                description: "Impossible de générer l'image à partager",
                variant: "destructive",
                duration: 3000,
            });
        }
    };

    const handleDownload = () => {
        if (!generatedImage) return;

        const link = document.createElement('a');
        link.href = generatedImage;
        link.download = `conseil-guidy-${new Date().getTime()}.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        toast({
            title: "Image enregistrée",
            description: "L'image a été téléchargée sur votre appareil",
            duration: 2000,
        });

        setTimeout(() => setShowShareOptions(false), 500);
    };

    const displayContent = cleanContentForDisplay(isUser ? message.content : displayedContent);
    const hasPresentationJson = extractPresentationJson(message.content) !== null;

    // Classes de bulle de message améliorées avec dégradés élégants
    const bubbleClass = isUser
        ? 'bg-gradient-to-br from-blue-500 to-indigo-600 text-white shadow-lg'
        : `bg-white dark:bg-gray-800 shadow-md ${highlight ? 'border-indigo-300 dark:border-indigo-600' : 'border-gray-100 dark:border-gray-700'} border text-gray-800 dark:text-gray-200`;

    // Animation de l'apparition avancée
    const bubbleVariants = {
        hidden: { opacity: 0, y: 20, scale: 0.97 },
        visible: {
            opacity: 1,
            y: 0,
            scale: 1,
            transition: {
                type: "spring",
                stiffness: 400,
                damping: 30,
                mass: 1
            }
        }
    };

    // Animation des indicateurs de frappe
    const typingVariants = {
        animate: (i: number) => ({
            scale: [0.7, 1.1, 0.7],
            opacity: [0.6, 1, 0.6],
            transition: {
                duration: 1.4,
                repeat: Infinity,
                delay: i * 0.2,
                ease: "easeInOut"
            }
        })
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 15 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, ease: "easeOut" }}
            className={`flex items-start gap-3 ${isUser ? 'flex-row-reverse' : ''} mb-5 max-w-full relative`}
            onMouseEnter={() => !isUser && setShowReactions(true)}
            onMouseLeave={() => setShowReactions(false)}
        >
            {/* Avatar avec animation au survol */}
            <motion.div
                whileHover={{ scale: 1.1 }}
                transition={{ type: "spring", stiffness: 400, damping: 17 }}
                className="flex-shrink-0 mt-1"
            >
                <Avatar className="w-10 h-10 border-2 border-white shadow-md">
                    {isUser ? (
                        <>
                            <AvatarImage src="/user-avatar.png" alt="User" />
                            <AvatarFallback className="bg-gradient-to-br from-blue-400 to-blue-600 text-white">
                                <User className="h-5 w-5" />
                            </AvatarFallback>
                        </>
                    ) : (
                        <>
                            <AvatarImage src="/ai-avatar.png" alt="AI" />
                            <AvatarFallback className="bg-gradient-to-br from-indigo-500 to-purple-600 text-white">
                                <Sparkles className="h-5 w-5" />
                            </AvatarFallback>
                        </>
                    )}
                </Avatar>
            </motion.div>

            <div
                ref={messageRef}
                className={`flex-1 max-w-[calc(100%-4rem)] ${isUser ? 'mr-2' : 'ml-2'}`}
            >
                <motion.div
                    ref={bubbleRef}
                    variants={bubbleVariants}
                    initial="hidden"
                    animate="visible"
                    className={`p-4 sm:p-5 rounded-2xl ${bubbleClass} ${highlight ? 'ring-2 ring-indigo-300 dark:ring-indigo-600 ring-opacity-50' : ''} transition-all duration-300`}
                    style={{
                        boxShadow: isUser
                            ? '0 8px 16px rgba(79, 70, 229, 0.15)'
                            : highlight
                                ? '0 4px 20px rgba(79, 70, 229, 0.1)'
                                : '0 4px 12px rgba(0, 0, 0, 0.05)'
                    }}
                >
                    {/* En-tête du message pour l'assistant */}
                    {!isUser && (
                        <div className="flex items-center mb-3">
                            <div className="flex items-center text-xs font-medium text-indigo-500 dark:text-indigo-400">
                                <Sparkles className="h-3.5 w-3.5 mr-1.5" />
                                Guidy
                            </div>

                            {/* Badge d'assistance */}
                            <div className="ml-auto flex items-center">
                                <span className="text-xs font-semibold px-2 py-0.5 rounded-full bg-indigo-100 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-300">
                                    Assistant
                                </span>
                            </div>
                        </div>
                    )}

                    <ReactMarkdown
                        components={{
                            h1: ({ node, ...props }) => (
                                <motion.h1
                                    initial={{ opacity: 0, y: 5 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.2 }}
                                    className="text-xl font-semibold mb-3 mt-1"
                                    {...props}
                                />
                            ),
                            h2: ({ node, ...props }) => (
                                <motion.h2
                                    initial={{ opacity: 0, y: 5 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.3 }}
                                    className="text-lg font-semibold mb-2 mt-3"
                                    {...props}
                                />
                            ),
                            h3: ({ node, ...props }) => (
                                <motion.h3
                                    initial={{ opacity: 0, y: 5 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ delay: 0.4 }}
                                    className="text-base font-medium mb-2 mt-2"
                                    {...props}
                                />
                            ),
                            ul: ({ node, ...props }) => <ul className="list-disc ml-5 space-y-1.5 my-2" {...props} />,
                            ol: ({ node, ...props }) => <ol className="list-decimal ml-5 space-y-1.5 my-2" {...props} />,
                            li: ({ node, ...props }) => (
                                <li className="text-sm leading-relaxed" {...props} />
                            ),
                            p: ({ node, ...props }) => (
                                <p className="text-sm leading-relaxed whitespace-pre-wrap mb-3" {...props} />
                            ),
                            strong: ({ node, ...props }) => (
                                <strong
                                    className={`font-semibold ${isUser
                                        ? 'text-white'
                                        : 'text-indigo-600 dark:text-indigo-300'
                                    }`}
                                    {...props}
                                />
                            ),
                            em: ({ node, ...props }) => <em className="italic" {...props} />,
                            blockquote: ({ node, ...props }) => (
                                <blockquote
                                    className={`border-l-4 ${isUser
                                        ? 'border-white/30'
                                        : 'border-indigo-200 dark:border-indigo-700'
                                    } pl-3 italic my-3 text-sm`}
                                    {...props}
                                />
                            ),
                            // @ts-ignore
                            code: ({ node, inline, ...props }) => (
                                inline
                                    ? <code
                                        className={`px-1.5 py-0.5 rounded text-xs font-mono ${isUser
                                            ? 'bg-white/15'
                                            : 'bg-indigo-50 dark:bg-gray-700 text-indigo-700 dark:text-indigo-300'
                                        }`}
                                        {...props}
                                    />
                                    : <motion.code
                                        initial={{ opacity: 0, y: 5 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ delay: 0.2 }}
                                        className={`block p-3 rounded-lg my-3 font-mono text-xs ${isUser
                                            ? 'bg-white/15'
                                            : 'bg-gray-50 dark:bg-gray-800/80 text-gray-800 dark:text-gray-200'
                                        }`}
                                        {...props}
                                    />
                            )
                        }}
                    >
                        {displayContent}
                    </ReactMarkdown>

                    {/* Indicateur d'écriture amélioré */}
                    {!isUser && !isTypingComplete && (
                        <div className="flex space-x-1.5 mt-2 ml-1">
                            {[0, 1, 2].map((i) => (
                                <motion.span
                                    key={i}
                                    custom={i}
                                    variants={typingVariants}
                                    animate="animate"
                                    className="inline-block w-2 h-2 rounded-full bg-indigo-400 dark:bg-indigo-500"
                                />
                            ))}
                        </div>
                    )}

                    {/* Bouton pour générer une présentation PowerPoint amélioré */}
                    {!isUser && isTypingComplete && hasPresentationJson && (
                        <motion.div
                            initial={{ opacity: 0, y: 10 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ delay: 0.5, duration: 0.3 }}
                            className="mt-4 flex"
                        >
                            <Button
                                variant="secondary"
                                size="sm"
                                onClick={handleGeneratePPTX}
                                disabled={isGeneratingPPTX}
                                className="text-xs h-9 bg-gradient-to-r from-indigo-50 to-indigo-100 text-indigo-700 hover:from-indigo-100 hover:to-indigo-200 dark:from-indigo-900/40 dark:to-indigo-800/40 dark:text-indigo-300 dark:hover:from-indigo-800/50 dark:hover:to-indigo-700/50 font-medium shadow-sm"
                            >
                                {isGeneratingPPTX ? (
                                    <motion.div
                                        animate={{ rotate: 360 }}
                                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                                        className="h-4 w-4 mr-2"
                                    >
                                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                        </svg>
                                    </motion.div>
                                ) : isPPTXSuccess ? (
                                    <motion.div
                                        initial={{ scale: 0 }}
                                        animate={{ scale: 1 }}
                                        transition={{ type: "spring", stiffness: 400, damping: 10 }}
                                    >
                                        <Check className="h-4 w-4 mr-2 text-green-500" />
                                    </motion.div>
                                ) : (
                                    <Presentation className="h-4 w-4 mr-2" />
                                )}
                                <span>Exporter en PowerPoint</span>
                            </Button>
                        </motion.div>
                    )}
                </motion.div>

                {/* Barre inférieure avec options et métadonnées */}
                <div className={`flex items-center gap-2 mt-2 ${isUser ? 'justify-end' : 'justify-between'}`}>
                    <div className="text-xs text-gray-500 dark:text-gray-400 font-medium">
                        {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </div>

                    {/* Boutons de réaction pour messages de l'assistant */}
                    {!isUser && isTypingComplete && (
                        <AnimatePresence>
                            {(showReactions || liked || saved) && (
                                <motion.div
                                    initial={{ opacity: 0, scale: 0.9 }}
                                    animate={{ opacity: 1, scale: 1 }}
                                    exit={{ opacity: 0, scale: 0.9 }}
                                    transition={{ duration: 0.2 }}
                                    className="flex items-center space-x-1.5 ml-2"
                                >
                                    <TooltipProvider>
                                        <Tooltip>
                                            <TooltipTrigger asChild>
                                                <motion.button
                                                    whileHover={{ scale: 1.15 }}
                                                    whileTap={{ scale: 0.9 }}
                                                    onClick={() => handleReaction('like')}
                                                    className={`p-1.5 rounded-full ${liked
                                                        ? 'bg-indigo-100 text-indigo-600 dark:bg-indigo-900/50 dark:text-indigo-400'
                                                        : 'hover:bg-gray-100 text-gray-500 dark:hover:bg-gray-800 dark:text-gray-400'}`}
                                                >
                                                    <ThumbsUp className="h-3.5 w-3.5" />
                                                </motion.button>
                                            </TooltipTrigger>
                                            <TooltipContent side="top">
                                                <p className="text-xs">{liked ? "Retirer le J'aime" : "J'aime"}</p>
                                            </TooltipContent>
                                        </Tooltip>
                                    </TooltipProvider>

                                    <TooltipProvider>
                                        <Tooltip>
                                            <TooltipTrigger asChild>
                                                <motion.button
                                                    whileHover={{ scale: 1.15 }}
                                                    whileTap={{ scale: 0.9 }}
                                                    onClick={() => handleReaction('save')}
                                                    className={`p-1.5 rounded-full ${saved
                                                        ? 'bg-amber-100 text-amber-600 dark:bg-amber-900/50 dark:text-amber-400'
                                                        : 'hover:bg-gray-100 text-gray-500 dark:hover:bg-gray-800 dark:text-gray-400'}`}
                                                >
                                                    <Sparkles className="h-3.5 w-3.5" />
                                                </motion.button>
                                            </TooltipTrigger>
                                            <TooltipContent side="top">
                                                <p className="text-xs">{saved ? "Retirer des favoris" : "Sauvegarder"}</p>
                                            </TooltipContent>
                                        </Tooltip>
                                    </TooltipProvider>
                                </motion.div>
                            )}
                        </AnimatePresence>
                    )}

                    {/* Menu d'actions avec animations */}
                    {!isUser && isTypingComplete && (
                        <div className="flex items-center">
                            <DropdownMenu>
                                <TooltipProvider>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                            <DropdownMenuTrigger asChild>
                                                <motion.button
                                                    whileHover={{ scale: 1.1, rotate: 15 }}
                                                    whileTap={{ scale: 0.95 }}
                                                    transition={{ type: "spring", stiffness: 400, damping: 17 }}
                                                    className="h-8 w-8 p-0 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-800 rounded-full text-gray-500 dark:text-gray-400"
                                                >
                                                    <MoreHorizontal className="h-4 w-4" />
                                                </motion.button>
                                            </DropdownMenuTrigger>
                                        </TooltipTrigger>
                                        <TooltipContent side="left">
                                            <p className="text-xs">Plus d'options</p>
                                        </TooltipContent>
                                    </Tooltip>
                                </TooltipProvider>

                                <DropdownMenuContent align="end" className="w-52 p-1.5 shadow-lg border-gray-200 dark:border-gray-700">
                                    <DropdownMenuItem onClick={handleCopy} className="cursor-pointer rounded-md flex items-center gap-2 py-2 text-sm">
                                        {copied ? (
                                            <motion.div
                                                initial={{ scale: 0 }}
                                                animate={{ scale: 1 }}
                                                transition={{ type: "spring", stiffness: 400, damping: 10 }}
                                            >
                                                <Check className="h-4 w-4 text-green-500" />
                                            </motion.div>
                                        ) : (
                                            <Copy className="h-4 w-4" />
                                        )}
                                        <span>{copied ? "Copié!" : "Copier le contenu"}</span>
                                    </DropdownMenuItem>

                                    <DropdownMenuItem onClick={handleShare} className="cursor-pointer rounded-md flex items-center gap-2 py-2 text-sm">
                                        <Share2 className="h-4 w-4" />
                                        <span>Partager comme image</span>
                                    </DropdownMenuItem>

                                    {hasPresentationJson && (
                                        <DropdownMenuItem onClick={handleGeneratePPTX} className="cursor-pointer rounded-md flex items-center gap-2 py-2 text-sm">
                                            <Presentation className="h-4 w-4" />
                                            <span>Exporter en PowerPoint</span>
                                        </DropdownMenuItem>
                                    )}

                                    <DropdownMenuSeparator className="my-1 bg-gray-200 dark:bg-gray-700" />

                                    <DropdownMenuItem
                                        onClick={() => handleReaction('like')}
                                        className={`cursor-pointer rounded-md flex items-center gap-2 py-2 text-sm ${
                                            liked ? 'text-indigo-600 dark:text-indigo-400 bg-indigo-50 dark:bg-indigo-900/20 font-medium' : ''
                                        }`}
                                    >
                                        <ThumbsUp className="h-4 w-4" />
                                        <span>{liked ? "Retirer le J'aime" : "J'aime"}</span>
                                    </DropdownMenuItem>

                                    <DropdownMenuItem
                                        onClick={() => handleReaction('save')}
                                        className={`cursor-pointer rounded-md flex items-center gap-2 py-2 text-sm ${
                                            saved ? 'text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/20 font-medium' : ''
                                        }`}
                                    >
                                        <Sparkles className="h-4 w-4" />
                                        <span>{saved ? "Retirer des favoris" : "Sauvegarder"}</span>
                                    </DropdownMenuItem>
                                </DropdownMenuContent>
                            </DropdownMenu>
                        </div>
                    )}
                </div>
            </div>

            {/* Modal de partage complètement revu et modernisé */}
            <AnimatePresence>
                {showShareOptions && (
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50"
                        onClick={() => setShowShareOptions(false)}
                    >
                        <motion.div
                            initial={{ scale: 0.95, opacity: 0, y: 20 }}
                            animate={{ scale: 1, opacity: 1, y: 0 }}
                            exit={{ scale: 0.95, opacity: 0, y: 20 }}
                            transition={{ type: "spring", stiffness: 350, damping: 25 }}
                            className="bg-white dark:bg-gray-900 p-6 rounded-2xl max-w-md w-full mx-4 shadow-2xl border dark:border-gray-700"
                            onClick={e => e.stopPropagation()}
                        >
                            <div className="flex justify-between items-center mb-5">
                                <motion.h3
                                    initial={{ x: -10, opacity: 0 }}
                                    animate={{ x: 0, opacity: 1 }}
                                    transition={{ delay: 0.1 }}
                                    className="text-lg font-semibold text-gray-900 dark:text-gray-100 flex items-center"
                                >
                                    <Share2 className="h-5 w-5 mr-2 text-indigo-500" />
                                    Partager ce conseil
                                </motion.h3>

                                <motion.div
                                    whileHover={{ scale: 1.1, rotate: 90 }}
                                    whileTap={{ scale: 0.9 }}
                                >
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => setShowShareOptions(false)}
                                        className="h-8 w-8 p-0 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800"
                                    >
                                        <X className="h-4 w-4" />
                                    </Button>
                                </motion.div>
                            </div>

                            {generatedImage && (
                                <motion.div
                                    initial={{ y: 20, opacity: 0 }}
                                    animate={{ y: 0, opacity: 1 }}
                                    transition={{ delay: 0.2 }}
                                    className="mb-5 rounded-xl overflow-hidden shadow-lg border border-gray-200 dark:border-gray-700"
                                >
                                    <img
                                        src={generatedImage}
                                        alt="Aperçu du message à partager"
                                        className="w-full object-contain"
                                    />
                                </motion.div>
                            )}

                            <motion.div
                                initial={{ y: 20, opacity: 0 }}
                                animate={{ y: 0, opacity: 1 }}
                                transition={{ delay: 0.3 }}
                                className="flex gap-3"
                            >
                                <Button
                                    onClick={handleDownload}
                                    className="flex-1 bg-gradient-to-r from-indigo-600 to-indigo-700 hover:from-indigo-700 hover:to-indigo-800 text-white font-medium shadow-md"
                                >
                                    <Download className="h-4 w-4 mr-2" />
                                    Télécharger l'image
                                </Button>

                                <Button
                                    onClick={() => setShowShareOptions(false)}
                                    variant="outline"
                                    className="flex-1 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800"
                                >
                                    Annuler
                                </Button>
                            </motion.div>

                            <motion.p
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 0.8 }}
                                transition={{ delay: 0.5 }}
                                className="text-xs text-center mt-4 text-gray-500 dark:text-gray-400"
                            >
                                L'image est prête à être partagée avec vos contacts
                            </motion.p>
                        </motion.div>
                    </motion.div>
                )}
            </AnimatePresence>

            <style jsx global>{`
                .share-image-style {
                    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
                    border-width: 1px;
                }
                .share-image-style strong {
                    color: #4f46e5 !important;
                }

                /* Animation de surlignage du texte */
                @keyframes highlight-text {
                    0% { background-position: -100% 0; }
                    100% { background-position: 200% 0; }
                }

                .highlight-text {
                    background: linear-gradient(90deg, transparent 0%, rgba(79, 70, 229, 0.2) 50%, transparent 100%);
                    background-size: 200% 100%;
                    animation: highlight-text 2s ease-in-out;
                }

                /* Animation d'apparition des blocs de code */
                .message-bubble-code {
                    transform-origin: center top;
                    animation: code-appear 0.5s ease forwards;
                }

                @keyframes code-appear {
                    from { opacity: 0; transform: translateY(10px); }
                    to { opacity: 1; transform: translateY(0); }
                }

                /* Animation de pulse pour attirer l'attention */
                @keyframes pulse-border {
                    0% { box-shadow: 0 0 0 0 rgba(79, 70, 229, 0.4); }
                    70% { box-shadow: 0 0 0 6px rgba(79, 70, 229, 0); }
                    100% { box-shadow: 0 0 0 0 rgba(79, 70, 229, 0); }
                }

                .pulse-border {
                    animation: pulse-border 2s ease-out;
                }
            `}</style>
        </motion.div>
    );
};

export default MessageBubble;

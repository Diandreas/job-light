import React, { useState, useEffect, useRef } from 'react';
import { Link, Head } from '@inertiajs/react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { MotionPathPlugin } from 'gsap/MotionPathPlugin';
import { TextPlugin } from 'gsap/TextPlugin';
import GuestLayout from '@/Layouts/GuestLayout';

import { useTranslation } from 'react-i18next';
import {
    FileText, Brain, PenTool, MessageSquare,
    Sparkles, ArrowRight, Star, ChevronRight,
    Users, Award, Trophy, Terminal, Globe, Mail
} from 'lucide-react';
import { cn } from "@/lib/utils";
import Dropdown from '@/Components/Dropdown';
import FluidCursorEffect from "@/Components/ai/FluidCursorEffect";

// Register GSAP plugins
gsap.registerPlugin(ScrollTrigger, MotionPathPlugin, TextPlugin);

const LanguageSelector = () => {
    const { t, i18n } = useTranslation();

    return (
        <Dropdown>
            <Dropdown.Trigger>
                <button className="flex items-center gap-2 text-gray-600 hover:text-amber-600 transition-colors">
                    <Globe className="h-5 w-5" />
                    <span className="font-medium">{i18n.language === 'fr' ? 'FR' : 'EN'}</span>
                </button>
            </Dropdown.Trigger>
            <Dropdown.Content>
                <div className="bg-white rounded-lg w-32 shadow-lg">
                    <button
                        onClick={() => i18n.changeLanguage('fr')}
                        className={cn(
                            "w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md transition-colors",
                            i18n.language === 'fr'
                                ? "bg-gradient-to-r from-amber-500 to-purple-500 text-white"
                                : "text-gray-700 hover:bg-amber-50"
                        )}
                    >
                        <span className="font-medium">Fran√ßais</span>
                        {i18n.language === 'fr' && (
                            <div className="ml-auto w-2 h-2 rounded-full bg-white" />
                        )}
                    </button>
                    <button
                        onClick={() => i18n.changeLanguage('en')}
                        className={cn(
                            "w-full flex items-center gap-2 px-3 py-2 text-sm rounded-md transition-colors",
                            i18n.language === 'en'
                                ? "bg-gradient-to-r from-amber-500 to-purple-500 text-white"
                                : "text-gray-700 hover:bg-amber-50"
                        )}
                    >
                        <span className="font-medium">English</span>
                        {i18n.language === 'en' && (
                            <div className="ml-auto w-2 h-2 rounded-full bg-white" />
                        )}
                    </button>
                </div>
            </Dropdown.Content>
        </Dropdown>
    );
};

// SVG Component for the Resume animation
const ResumeSVG = React.forwardRef((props, ref) => (
    <svg
        ref={ref}
        width="240"
        height="320"
        viewBox="0 0 240 320"
        className="filter drop-shadow-lg"
        {...props}
    >
        {/* Background */}
        <rect id="paper" x="0" y="0" width="240" height="320" rx="8" fill="#fff" stroke="#e2e8f0" strokeWidth="2" />

        {/* Header */}
        <rect id="header" x="20" y="20" width="200" height="40" rx="4" fill="#f59e0b" fillOpacity="0.1" />
        <circle id="profile" cx="40" cy="40" r="12" fill="#f59e0b" fillOpacity="0.3" />
        <rect id="name" x="70" y="30" width="120" height="8" rx="2" fill="#f59e0b" />
        <rect id="title" x="70" y="45" width="100" height="5" rx="2" fill="#f59e0b" fillOpacity="0.6" />

        {/* Experience section */}
        <rect id="exp-section" x="20" y="80" width="200" height="10" rx="2" fill="#cbd5e1" />

        {/* Experience 1 */}
        <rect id="exp1" x="20" y="100" width="200" height="30" rx="2" fill="#f8fafc" />
        <rect id="exp1-title" x="25" y="105" width="120" height="6" rx="2" fill="#94a3b8" />
        <rect id="exp1-company" x="25" y="115" width="80" height="5" rx="2" fill="#94a3b8" opacity="0.7" />
        <rect id="exp1-date" x="180" y="105" width="35" height="4" rx="1" fill="#94a3b8" opacity="0.5" />
        <rect id="exp1-bullet" x="25" y="125" width="190" height="3" rx="1" fill="#e2e8f0" />

        {/* Experience 2 */}
        <rect id="exp2" x="20" y="140" width="200" height="30" rx="2" fill="#f8fafc" />
        <rect id="exp2-title" x="25" y="145" width="110" height="6" rx="2" fill="#94a3b8" />
        <rect id="exp2-company" x="25" y="155" width="70" height="5" rx="2" fill="#94a3b8" opacity="0.7" />
        <rect id="exp2-date" x="180" y="145" width="35" height="4" rx="1" fill="#94a3b8" opacity="0.5" />
        <rect id="exp2-bullet" x="25" y="165" width="190" height="3" rx="1" fill="#e2e8f0" />

        {/* Skills section */}
        <rect id="skills-section" x="20" y="190" width="200" height="10" rx="2" fill="#cbd5e1" />

        {/* Skills */}
        <rect id="skill1" x="20" y="210" width="60" height="20" rx="10" fill="#f59e0b" fillOpacity="0.2" />
        <rect id="skill2" x="90" y="210" width="60" height="20" rx="10" fill="#f59e0b" fillOpacity="0.2" />
        <rect id="skill3" x="160" y="210" width="60" height="20" rx="10" fill="#f59e0b" fillOpacity="0.2" />

        <rect id="skill4" x="20" y="240" width="70" height="20" rx="10" fill="#f59e0b" fillOpacity="0.2" />
        <rect id="skill5" x="100" y="240" width="70" height="20" rx="10" fill="#f59e0b" fillOpacity="0.2" />

        {/* Education section */}
        <rect id="edu-section" x="20" y="270" width="200" height="10" rx="2" fill="#cbd5e1" />
        <rect id="edu1" x="20" y="290" width="200" height="20" rx="2" fill="#f8fafc" />
        <rect id="edu1-school" x="25" y="295" width="130" height="6" rx="2" fill="#94a3b8" />
        <rect id="edu1-degree" x="25" y="305" width="100" height="4" rx="1" fill="#94a3b8" opacity="0.7" />
    </svg>
));

// Component for animated process steps
const ProcessStep = ({ num, title, description, icon: Icon, color = 'amber', isActive, onMouseEnter }) => {
    const stepRef = useRef(null);

    useEffect(() => {
        if (isActive) {
            gsap.to(stepRef.current, {
                scale: 1.05,
                backgroundColor: 'rgba(245, 158, 11, 0.1)',
                boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
                duration: 0.3,
                ease: 'power1.out'
            });
        } else {
            gsap.to(stepRef.current, {
                scale: 1,
                backgroundColor: 'rgba(255, 255, 255, 1)',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
                duration: 0.3,
                ease: 'power1.out'
            });
        }
    }, [isActive]);

    return (
        <div
            ref={stepRef}
            className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700 transition-all"
            onMouseEnter={onMouseEnter}
        >
            <div className="flex items-center mb-4">
                <div className={`p-3 rounded-lg bg-${color}-500 text-white mr-4`}>
                    <div className="font-bold text-lg">{num}</div>
                </div>
                <div className={`p-3 rounded-lg bg-gradient-to-r from-${color}-500 to-purple-500`}>
                    <Icon className="w-6 h-6 text-white" />
                </div>
            </div>
            <h3 className="text-xl font-semibold mb-2 dark:text-white">{title}</h3>
            <p className="text-gray-600 dark:text-gray-300">{description}</p>
        </div>
    );
};

// Animated counter component
const AnimatedCounter = ({ target, duration = 2000 }) => {
    const counterRef = useRef(null);
    const [counted, setCounted] = useState(false);

    useEffect(() => {
        const counter = counterRef.current;

        const triggerAnimation = () => {
            if (counter && !counted) {
                const tl = gsap.timeline({
                    scrollTrigger: {
                        trigger: counter,
                        start: "top 80%",
                        once: true
                    }
                });

                tl.to(counter, {
                    duration: duration / 1000,
                    innerText: target,
                    snap: { innerText: 1 },
                    modifiers: {
                        innerText: value => parseInt(value).toLocaleString() + "+"
                    },
                    ease: "power1.inOut"
                });

                setCounted(true);
            }
        };

        triggerAnimation();

        return () => {
            // Cleanup if needed
        };
    }, [target, duration, counted]);

    return <span ref={counterRef}>0+</span>;
};

// Feature card with animation
const FeatureCard = ({ icon: Icon, title, description, action, link }) => {
    const cardRef = useRef(null);

    useEffect(() => {
        const card = cardRef.current;
        if (card) {
            gsap.set(card, { y: 50, opacity: 0 });

            ScrollTrigger.create({
                trigger: card,
                start: "top 85%",
                onEnter: () => {
                    gsap.to(card, {
                        y: 0,
                        opacity: 1,
                        duration: 0.8,
                        ease: "power3.out"
                    });
                },
                once: true
            });
        }
    }, []);

    return (
        <div
            ref={cardRef}
            className="relative bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-100 dark:border-gray-700 overflow-hidden group"
        >
            <div className="absolute inset-0 bg-gradient-to-r from-amber-500/10 to-purple-500/10 dark:from-amber-500/5 dark:to-purple-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
            <div className="relative z-10">
                <div className="flex justify-between items-start mb-4">
                    <div className="p-3 rounded-lg bg-gradient-to-r from-amber-500 to-purple-500 transform group-hover:rotate-6 transition-transform duration-300">
                        <Icon className="w-6 h-6 text-white" />
                    </div>
                </div>
                <h3 className="text-xl font-semibold mb-2 group-hover:text-amber-600 dark:group-hover:text-amber-400 transition-colors dark:text-white">{title}</h3>
                <p className="text-gray-600 dark:text-gray-300 mb-4">{description}</p>
                <Link href={link} className="inline-flex items-center text-amber-600 dark:text-amber-400 hover:text-amber-700 dark:hover:text-amber-300 font-medium group">
                    {action}
                    <ArrowRight className="ml-2 w-4 h-4 transform group-hover:translate-x-1 transition-transform" />
                </Link>
            </div>
        </div>
    );
};

// Statistic card with animation
const StatisticCard = ({ icon: Icon, value, label }) => {
    const cardRef = useRef(null);

    useEffect(() => {
        const card = cardRef.current;
        if (card) {
            gsap.set(card, { scale: 0.8, opacity: 0 });

            ScrollTrigger.create({
                trigger: card,
                start: "top 85%",
                onEnter: () => {
                    gsap.to(card, {
                        scale: 1,
                        opacity: 1,
                        duration: 0.6,
                        ease: "back.out(1.7)"
                    });
                },
                once: true
            });
        }
    }, []);

    return (
        <div
            ref={cardRef}
            className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700"
        >
            <Icon className="w-8 h-8 text-amber-500 dark:text-amber-400 mb-4" />
            <div className="text-3xl font-bold text-gray-800 dark:text-white mb-2">
                <AnimatedCounter target={value} />
            </div>
            <p className="text-gray-600 dark:text-gray-300">{label}</p>
        </div>
    );
};

export default function Welcome() {
    const { t } = useTranslation();
    const heroRef = useRef(null);
    const resumeSvgRef = useRef(null);
    const processContainerRef = useRef(null);
    const timelineRef = useRef(null);
    const processPathRef = useRef(null);
    const [activeStep, setActiveStep] = useState(0);

    // Features and statistics data
    const features = [
        {
            icon: FileText,
            title: t('features.cv_designer.title'),
            description: t('features.cv_designer.description'),
            action: t('features.cv_designer.action'),
            link: route('register')
        },
        {
            icon: Brain,
            title: t('features.career_advisor.title'),
            description: t('features.career_advisor.description'),
            action: t('features.career_advisor.action'),
            link: route('register')
        },
        {
            icon: PenTool,
            title: t('features.cover_letter.title'),
            description: t('features.cover_letter.description'),
            action: t('features.cover_letter.action'),
            link: route('register')
        },
        {
            icon: MessageSquare,
            title: t('features.interview_coach.title'),
            description: t('features.interview_coach.description'),
            action: t('features.interview_coach.action'),
            link: route('register')
        }
    ];

    const statistics = [
        {
            icon: Users,
            value: 50000,
            label: t('stats.users')
        },
        {
            icon: Award,
            value: 95,
            label: t('stats.satisfaction')
        },
        {
            icon: Trophy,
            value: 75000,
            label: t('stats.cvs')
        },
        {
            icon: Terminal,
            value: 99,
            label: t('stats.availability')
        }
    ];

    const processSteps = [
        {
            num: 1,
            icon: Users,
            title: "Cr√©ez votre compte",
            description: "Inscrivez-vous gratuitement en quelques secondes pour acc√©der √† toutes les fonctionnalit√©s."
        },
        {
            num: 2,
            icon: FileText,
            title: "Saisissez vos informations",
            description: "Entrez vos exp√©riences, comp√©tences et formation pour alimenter l'IA."
        },
        {
            num: 3,
            icon: Brain,
            title: "Notre IA optimise votre CV",
            description: "L'IA analyse et reformule chaque section pour mettre en valeur vos comp√©tences."
        },
        {
            num: 4,
            icon: PenTool,
            title: "Personnalisez votre design",
            description: "Choisissez parmi nos templates professionnels optimis√©s pour ATS."
        },
        {
            num: 5,
            icon: Trophy,
            title: "T√©l√©chargez et postulez",
            description: "Exportez votre CV en PDF et commencez √† postuler avec confiance."
        }
    ];

    // Initialize animations on component mount
    useEffect(() => {
        // Hero section animation
        if (heroRef.current) {
            const tl = gsap.timeline();
            tl.from(".hero-title", {
                y: 30,
                opacity: 0,
                duration: 0.8,
                ease: "power3.out"
            })
                .from(".hero-desc", {
                    y: 20,
                    opacity: 0,
                    duration: 0.8,
                    ease: "power3.out"
                }, "-=0.4")
                .from(".hero-cta", {
                    y: 20,
                    opacity: 0,
                    duration: 0.8,
                    ease: "power3.out"
                }, "-=0.4");
        }

        // Resume SVG animation on scroll
        if (resumeSvgRef.current) {
            const svg = resumeSvgRef.current;

            // Initial floating animation
            gsap.to(svg, {
                y: 15,
                duration: 2,
                repeat: -1,
                yoyo: true,
                ease: "power1.inOut"
            });

            // CV elements appearing animation
            const elements = [
                "#paper", "#header", "#profile", "#name", "#title",
                "#exp-section", "#exp1", "#exp1-title", "#exp1-company", "#exp1-date", "#exp1-bullet",
                "#exp2", "#exp2-title", "#exp2-company", "#exp2-date", "#exp2-bullet",
                "#skills-section", "#skill1", "#skill2", "#skill3", "#skill4", "#skill5",
                "#edu-section", "#edu1", "#edu1-school", "#edu1-degree"
            ];

            const tl = gsap.timeline({
                scrollTrigger: {
                    trigger: ".resume-container",
                    start: "top center",
                    end: "bottom center",
                    scrub: true
                }
            });

            // Create opacity and transform animations for each element
            elements.forEach((el, index) => {
                if (index === 0) {
                    // Just scale the paper slightly
                    tl.from(svg.querySelector(el), {
                        scale: 0.95,
                        duration: 0.1
                    }, 0);
                } else {
                    // Fade in all other elements sequentially
                    tl.from(svg.querySelector(el), {
                        opacity: 0,
                        y: 10,
                        duration: 0.1
                    }, index * 0.03);
                }
            });

            // CV movement animation
            gsap.timeline({
                scrollTrigger: {
                    trigger: ".process-section",
                    start: "top bottom",
                    end: "bottom top",
                    scrub: true
                }
            }).to(svg, {
                x: window.innerWidth > 768 ? 300 : 0,
                y: window.innerWidth > 768 ? 0 : 300,
                rotation: 10,
                scale: 1.2,
                ease: "power1.inOut"
            });
        }

        // Process animation with steps
        if (processContainerRef.current && timelineRef.current) {
            // Timeline animation
            const tl = gsap.timeline({
                scrollTrigger: {
                    trigger: processContainerRef.current,
                    start: "top center",
                    end: "bottom center",
                    scrub: true
                }
            });

            // Animate the timeline progress
            tl.to(timelineRef.current, {
                width: "100%",
                duration: 1,
                ease: "none"
            });

            // Set up automatic step progression based on scroll
            ScrollTrigger.create({
                trigger: processContainerRef.current,
                start: "top center",
                end: "bottom center",
                scrub: true,
                onUpdate: (self) => {
                    // Calculate which step should be active based on scroll progress
                    const newStep = Math.min(
                        Math.floor(self.progress * processSteps.length),
                        processSteps.length - 1
                    );
                    setActiveStep(newStep);
                }
            });
        }

        // Clean up animations on unmount
        return () => {
            ScrollTrigger.getAll().forEach(trigger => trigger.kill());
            gsap.killTweensOf("*");
        };
    }, []);

    return (
        <GuestLayout>
            <Head>
                <title>Guidy | Cr√©ez un CV Professionnel en 5 Minutes avec l'IA | Resume Builder</title>
                {/* Other head elements remain the same... */}
            </Head>

            <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
                {/* Hero Section with GSAP animations */}
                <div ref={heroRef} className="pt-24 pb-16 md:pt-32 md:pb-24">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="flex flex-col md:flex-row items-center justify-between">
                            <div className="md:w-1/2 mb-12 md:mb-0">
                                <div className="mb-6">
                                    <span className="bg-amber-100 dark:bg-amber-900/40 text-amber-800 dark:text-amber-300 px-4 py-2 rounded-full text-sm font-medium">
                                        {t('hero.badge')}
                                    </span>
                                </div>
                                <h1 className="hero-title text-4xl md:text-5xl lg:text-6xl font-bold mb-6 bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                    {t('cta_image.title')}
                                </h1>
                                <p className="hero-desc text-lg md:text-xl text-gray-600 dark:text-gray-300 mb-8">
                                    {t('hero.description')}
                                </p>
                                <div className="hero-cta">
                                    <Link
                                        href={route('register')}
                                        className="inline-flex items-center px-6 py-3 rounded-full text-lg font-medium bg-gradient-to-r from-amber-500 to-purple-500 text-white hover:from-amber-600 hover:to-purple-600 shadow-lg hover:shadow-xl transition-all"
                                    >
                                        {t('cta_image.button')}
                                        <ArrowRight className="ml-2 w-5 h-5" />
                                    </Link>
                                </div>
                            </div>
                            <div className="md:w-1/2 flex justify-center relative resume-container">
                                <ResumeSVG ref={resumeSvgRef} className="z-10" />
                                <div className="absolute inset-0 bg-gradient-to-r from-amber-500/20 to-purple-500/20 rounded-xl filter blur-3xl opacity-30 z-0"></div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Process Section with Timeline */}
                <div className="py-16 bg-gray-50 dark:bg-gray-800/50">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="text-center mb-12">
                            <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                Comment √ßa marche
                            </h2>
                            <p className="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
                                Suivez ces √©tapes simples pour cr√©er un CV professionnel en quelques minutes.
                            </p>
                        </div>

                        <div
                            ref={processContainerRef}
                            className="process-section relative mt-20 mb-32"
                        >
                            {/* Timeline bar */}
                            <div className="absolute top-1/2 left-0 w-full h-1 bg-gray-200 dark:bg-gray-700 transform -translate-y-1/2 z-0">
                                <div
                                    ref={timelineRef}
                                    className="h-full bg-gradient-to-r from-amber-500 to-purple-500 w-0"
                                ></div>
                            </div>

                            {/* Process steps */}
                            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-8 relative z-10">
                                {processSteps.map((step, index) => (
                                    <ProcessStep
                                        key={index}
                                        num={step.num}
                                        icon={step.icon}
                                        title={step.title}
                                        description={step.description}
                                        isActive={index === activeStep}
                                        onMouseEnter={() => setActiveStep(index)}
                                    />
                                ))}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Features Grid */}
                <div className="py-16">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="text-center mb-12">
                            <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                Fonctionnalit√©s cl√©s
                            </h2>
                            <p className="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
                                D√©couvrez tout ce que Guidy peut faire pour votre carri√®re.
                            </p>
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
                            {features.map((feature, index) => (
                                <FeatureCard
                                    key={index}
                                    icon={feature.icon}
                                    title={feature.title}
                                    description={feature.description}
                                    action={feature.action}
                                    link={feature.link}
                                />
                            ))}
                        </div>
                    </div>
                </div>

                {/* Statistics Section */}
                <div className="py-16 bg-gray-50 dark:bg-gray-800/50">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="text-center mb-12">
                            <h2 className="text-3xl md:text-4xl font-bold mb-4 bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                Nos chiffres
                            </h2>
                            <p className="text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
                                Des r√©sultats qui parlent d'eux-m√™mes.
                            </p>
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
                            {statistics.map((stat, index) => (
                                <StatisticCard
                                    key={index}
                                    icon={stat.icon}
                                    value={stat.value}
                                    label={stat.label}
                                />
                            ))}
                        </div>
                    </div>
                </div>

                {/* Call to Action */}
                <div className="py-16">
                    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <div className="bg-gradient-to-r from-amber-100 to-purple-100 dark:from-amber-900/20 dark:to-purple-900/20 rounded-2xl overflow-hidden shadow-xl p-8 md:p-12 text-center">
                            <h2 className="text-3xl md:text-4xl font-bold mb-6 bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                Pr√™t √† booster votre carri√®re ?
                            </h2>
                            <p className="text-lg text-gray-600 dark:text-gray-300 mb-8 max-w-3xl mx-auto">
                                Cr√©ez votre CV professionnel d√®s aujourd'hui et augmentez vos chances de d√©crocher l'emploi de vos r√™ves.
                            </p>
                            <Link
                                href={route('register')}
                                className="inline-flex items-center px-8 py-4 rounded-full text-lg font-medium bg-gradient-to-r from-amber-500 to-purple-500 text-white hover:from-amber-600 hover:to-purple-600 shadow-lg hover:shadow-xl transition-all"
                            >
                                <Star className="w-5 h-5 mr-2" />
                                {t('cta.button')}
                            </Link>
                        </div>
                    </div>
                </div>

                {/* Footer */}
                <footer className="bg-white dark:bg-gray-900 border-t border-gray-100 dark:border-gray-800">
                    <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                            <div className="col-span-1 md:col-span-2">
                                <div className="flex items-center space-x-2 mb-4">
                                    <Sparkles className="w-6 h-6 text-amber-500 dark:text-amber-400" />
                                    <span className="font-bold text-xl bg-gradient-to-r from-amber-500 to-purple-500 text-transparent bg-clip-text">
                                        {t('brand')}
                                    </span>
                                </div>
                                <div className="flex space-x-4">
                                    <a
                                        href="mailto:guidy.makeitreall@gmail.com"
                                        className="text-gray-400 hover:text-amber-500 dark:text-gray-500 dark:hover:text-amber-400"
                                    >
                                        <Mail className="h-6 w-6" />
                                    </a>
                                    <a
                                        href="https://wa.me/237693427913"
                                        className="text-gray-400 hover:text-amber-500 dark:text-gray-500 dark:hover:text-amber-400"
                                    >
                                        <MessageSquare className="h-6 w-6" />
                                    </a>
                                </div>
                            </div>

                            <div>
                                <h3 className="text-sm font-semibold text-gray-600 dark:text-gray-300">{t('footer.services.title')}</h3>
                                <ul className="mt-4 space-y-2">
                                    <li>
                                        <Link href="#" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.services.resume')}
                                        </Link>
                                    </li>
                                    <li>
                                        <Link href="#" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.services.advisor')}
                                        </Link>
                                    </li>
                                    <li>
                                        <Link href="#" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.services.interview')}
                                        </Link>
                                    </li>
                                </ul>
                            </div>

                            <div>
                                <h3 className="text-sm font-semibold text-gray-600 dark:text-gray-300">{t('footer.legal.title')}</h3>
                                <ul className="mt-4 space-y-2">
                                    <li>
                                        <Link href="/privacy" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.legal.privacy')}
                                        </Link>
                                    </li>
                                    <li>
                                        <Link href="/terms" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.legal.terms')}
                                        </Link>
                                    </li>
                                    <li>
                                        <Link href="/cookies" className="text-gray-500 hover:text-amber-600 dark:text-gray-400 dark:hover:text-amber-400">
                                            {t('footer.legal.cookies')}
                                        </Link>
                                    </li>
                                </ul>
                            </div>
                        </div>

                        <div className="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
                            <p className="text-center text-gray-400 dark:text-gray-500">
                                ¬© {new Date().getFullYear()} {t('brand')}. {t('footer.copyright')}
                            </p>
                        </div>
                    </div>
                </footer>
            </div>
        </GuestLayout>
    );
}

import React, { useState, useCallback, useEffect } from 'react';
import { Head, Link } from '@inertiajs/react';
import { motion, AnimatePresence } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import {
    User, FileText, Briefcase, Code, GraduationCap, Globe,
    ChevronRight, ChevronLeft, Mail, Phone, MapPin, Linkedin,
    Github, PencilIcon, Sparkles, CircleChevronRight, Camera, FileUp, Coins,
    Trash2, CheckCircle, Star, X, Save
} from 'lucide-react';
import axios from 'axios';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/Components/ui/card";
import { Button } from "@/Components/ui/button";
import { useToast } from '@/Components/ui/use-toast';
import { ScrollArea } from "@/Components/ui/scroll-area";
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle } from "@/Components/ui/sheet";
import { Progress } from "@/Components/ui/progress";
import { Alert, AlertDescription } from "@/Components/ui/alert";
import { Separator } from "@/Components/ui/separator";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/Components/ui/dropdown-menu";

import PersonalInformationEdit from '@/Pages/CvInfos/Partials/PersonnalInfosEdit';
import CompetenceManager from '@/Pages/CvInfos/Partials/CompetenceManager';
import ProfessionManager from '@/Pages/CvInfos/Partials/ProfessionManager';
import ExperienceManager from "@/Pages/CvInfos/Partials/ExperienceManager";
import SummaryManager from '@/Pages/CvInfos/Partials/SummaryManager';
import LanguageManager from '@/Pages/CvInfos/Partials/LanguageManager';
import ReactCrop, { centerCrop, makeAspectCrop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';

// Simplified sidebar items - reduced from 7 to 5 essential sections
const SIDEBAR_ITEMS = [
    { id: 'personalInfo', label: 'Informations Personnelles', icon: User, color: 'text-amber-500' },
    { id: 'summary', label: 'Résumé Professionnel', icon: FileText, color: 'text-purple-500' },
    { id: 'experience', label: 'Expériences', icon: Briefcase, color: 'text-amber-600' },
    { id: 'competence', label: 'Compétences', icon: Code, color: 'text-purple-600' },
    { id: 'education', label: 'Formation', icon: GraduationCap, color: 'text-amber-500' },
];

// Personal info fields with clear labels
const PERSONAL_INFO_FIELDS = [
    { label: "Email", key: "email", icon: Mail },
    { label: "Phone", key: "phone", icon: Phone },
    { label: "Location", key: "address", icon: MapPin },
    { label: "LinkedIn", key: "linkedin", icon: Linkedin },
    { label: "GitHub", key: "github", icon: Github }
];

// Step indicator component for better visual progress
const StepIndicator = ({ currentStep, totalSteps }) => {
    return (
        <div className="flex items-center justify-center gap-1 my-2">
            {Array.from({ length: totalSteps }, (_, i) => (
                <div
                    key={i}
                    className={`h-2 w-2 rounded-full transition-all duration-300 ${
                        i < currentStep ? 'bg-green-500 scale-100' :
                            i === currentStep ? 'bg-blue-500 scale-125' : 'bg-gray-200 dark:bg-gray-700'
                    }`}
                />
            ))}
        </div>
    );
};

// Redesigned welcome card with tips and clearer CTAs
const WelcomeCard = ({ percentage, onImport, isImporting }) => {
    const { t } = useTranslation();

    // Tips to show based on progress
    const getTip = () => {
        if (percentage < 20) return "Commencez par remplir vos informations personnelles et ajouter une photo.";
        if (percentage < 40) return "Un résumé percutant fait ressortir votre CV. Soyez concis et impactant.";
        if (percentage < 60) return "Mettez l'accent sur vos réalisations plutôt que vos responsabilités.";
        if (percentage < 80) return "Listez les compétences pertinentes pour le poste que vous visez.";
        return "Vous y êtes presque ! Vérifiez votre CV avant de finaliser.";
    };

    return (
        <Card className="bg-gradient-to-r from-amber-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 border-none mb-4">
            <CardContent className="p-4">
                <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                    <div className="space-y-2 w-full sm:w-auto">
                        <h3 className="text-lg font-semibold text-gray-800 dark:text-white">
                            {t('cv.interface.welcome.title', 'Créez votre CV professionnel')}
                        </h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300">
                            {getTip()}
                        </p>
                        <div className="flex items-center gap-3">
                            <Progress value={percentage} className="w-32 h-3" />
                            <span className="text-sm font-medium flex items-center gap-1">
                                {percentage}%
                                <span className="text-xs text-gray-500 dark:text-gray-400">complété</span>
                                {percentage === 100 && <CheckCircle className="w-4 h-4 text-green-500" />}
                            </span>
                        </div>
                    </div>
                    <div className="w-full sm:w-auto flex flex-col sm:flex-row gap-2">
                        <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                                <Button variant="outline" className="w-full sm:w-auto text-sm h-9 py-0 border-amber-200 dark:border-amber-800 hover:bg-amber-50 dark:hover:bg-amber-900/50" disabled={isImporting}>
                                    {isImporting ? (
                                        <>
                                            <div className="animate-spin mr-2 w-4 h-4 border-2 border-amber-500 border-t-transparent rounded-full" />
                                            {t('cv.interface.import.loading', 'Importation en cours...')}
                                        </>
                                    ) : (
                                        <>
                                            <FileUp className="w-4 h-4 mr-2" />
                                            {t('cv.interface.import.button', 'Importer CV')}
                                        </>
                                    )}
                                </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end" className="text-sm">
                                <DropdownMenuItem onClick={() => onImport('pdf')} className="cursor-pointer h-10" disabled={isImporting}>
                                    <FileText className="w-4 h-4 mr-2" />
                                    {t('cv.interface.import.pdf', 'Importer depuis PDF')} (- 5 <Coins className="w-4 h-4 ml-1" />)
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => onImport('docx')} className="cursor-pointer h-10" disabled={isImporting}>
                                    <FileText className="w-4 h-4 mr-2" />
                                    {t('cv.interface.import.word', 'Importer depuis Word')} (- 5 <Coins className="w-4 h-4 ml-1" />)
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => onImport('linkedin')} className="cursor-pointer h-10" disabled={isImporting}>
                                    <Linkedin className="w-4 h-4 mr-2" />
                                    {t('cv.interface.import.linkedin', 'Importer depuis LinkedIn')} (- 8 <Coins className="w-4 h-4 ml-1" />)
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenu>

                        {percentage > 0 && (
                            <Button
                                className="w-full sm:w-auto text-sm bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400 text-white"
                            >
                                <Save className="w-4 h-4 mr-2" />
                                {t('cv.interface.save', 'Enregistrer')}
                            </Button>
                        )}
                    </div>
                </div>
            </CardContent>
        </Card>
    );
};

// Redesigned Personal Info card with inline editing capability
const PersonalInfoCard = ({ item, onEdit, updateCvInformation }) => {
    const [isUploading, setIsUploading] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const [uploadedImage, setUploadedImage] = useState(null);
    const [crop, setCrop] = useState({ unit: '%', width: 90, aspect: 1 });
    const [completedCrop, setCompletedCrop] = useState(null);
    const [imageRef, setImageRef] = useState(null);
    const { toast } = useToast();
    const { t } = useTranslation();

    const handleDeletePhoto = async () => {
        try {
            await axios.delete(route('personal-information.delete-photo'));
            updateCvInformation('personalInformation', {
                ...item,
                photo: null
            });
            toast({
                title: "Photo supprimée",
                description: "Votre photo de profil a été supprimée"
            });
        } catch (error) {
            toast({
                title: "Erreur lors de la suppression",
                variant: "destructive"
            });
        }
    };

    const onSelectFile = (e) => {
        if (e.target.files && e.target.files.length > 0) {
            const file = e.target.files[0];
            if (file.size > 5 * 1024 * 1024) {
                toast({
                    title: "Fichier trop volumineux",
                    description: "Veuillez choisir une image de moins de 5Mo",
                    variant: "destructive"
                });
                return;
            }
            const reader = new FileReader();
            reader.addEventListener('load', () => {
                setUploadedImage(reader.result);
                setIsOpen(true);
            });
            reader.readAsDataURL(file);
        }
    };

    const onImageLoad = (e) => {
        const { naturalWidth: width, naturalHeight: height } = e.currentTarget;
        const crop = centerCrop(
            makeAspectCrop(
                {
                    unit: '%',
                    width: 90,
                },
                1,
                width,
                height
            ),
            width,
            height
        );
        setCrop(crop);
    };

    const getCroppedImg = useCallback(() => {
        if (!imageRef || !completedCrop) return;

        const canvas = document.createElement('canvas');
        const scaleX = imageRef.naturalWidth / imageRef.width;
        const scaleY = imageRef.naturalHeight / imageRef.height;

        canvas.width = completedCrop.width;
        canvas.height = completedCrop.height;
        const ctx = canvas.getContext('2d');

        ctx.drawImage(
            imageRef,
            completedCrop.x * scaleX,
            completedCrop.y * scaleY,
            completedCrop.width * scaleX,
            completedCrop.height * scaleY,
            0,
            0,
            completedCrop.width,
            completedCrop.height
        );

        return new Promise((resolve) => {
            canvas.toBlob((blob) => {
                resolve(blob);
            }, 'image/jpeg', 0.95);
        });
    }, [imageRef, completedCrop]);

    const handleUpload = async () => {
        if (!completedCrop || !imageRef) {
            toast({
                title: "Erreur",
                description: "Veuillez d'abord recadrer votre image",
                variant: "destructive"
            });
            return;
        }

        try {
            setIsUploading(true);
            const croppedImage = await getCroppedImg();
            const formData = new FormData();
            formData.append('photo', croppedImage, 'profile.jpg');

            const response = await axios.post(route('personal-information.update-photo'), formData, {
                headers: {
                    'Content-Type': 'multipart/form-data'
                }
            });

            if (response.data.success) {
                updateCvInformation('personalInformation', {
                    ...item,
                    photo: response.data.photo_url
                });
                setIsOpen(false);
                toast({
                    title: "Photo téléchargée",
                    description: "Votre photo de profil a été mise à jour"
                });
            }
        } catch (error) {
            toast({
                title: "Échec du téléchargement",
                description: error.response?.data?.message || "Une erreur s'est produite lors du téléchargement de votre photo",
                variant: "destructive",
            });
        } finally {
            setIsUploading(false);
        }
    };

    return (
        <div className="space-y-4">
            <div className="flex justify-between items-center">
                <h2 className="text-xl font-bold text-gray-800 dark:text-white">
                    {t('cv.interface.personal.title', 'Informations Personnelles')}
                </h2>
                <Button
                    onClick={onEdit}
                    className="bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400 text-white"
                >
                    <PencilIcon className="h-4 w-4 mr-2" />
                    {t('cv.interface.personal.edit', 'Modifier')}
                </Button>
            </div>

            <Card>
                <CardContent className="p-5 space-y-4">
                    <div className="flex flex-col sm:flex-row items-center sm:items-start gap-4 border-b border-amber-100 dark:border-amber-800 pb-4">
                        <div className="relative h-20 w-20 flex-shrink-0">
                            {item.photo ? (
                                <div className="group relative h-full w-full">
                                    <img
                                        src={item.photo}
                                        alt="Profile"
                                        className="h-full w-full rounded-full object-cover"
                                    />
                                    <div className="absolute inset-0 bg-black bg-opacity-50 rounded-full opacity-0 group-hover:opacity-100 flex items-center justify-center gap-1 transition-opacity">
                                        <label className="cursor-pointer p-1 hover:bg-white/20 rounded-full">
                                            <input
                                                type="file"
                                                className="hidden"
                                                accept="image/*"
                                                onChange={onSelectFile}
                                                disabled={isUploading}
                                            />
                                            <Camera className="h-4 w-4 text-white" />
                                        </label>
                                        <button
                                            onClick={handleDeletePhoto}
                                            className="p-1 hover:bg-white/20 rounded-full"
                                        >
                                            <Trash2 className="h-4 w-4 text-white" />
                                        </button>
                                    </div>
                                </div>
                            ) : (
                                <div className="h-full w-full rounded-full bg-gradient-to-r from-amber-500/10 to-purple-500/10 flex items-center justify-center">
                                    <label className="cursor-pointer">
                                        <input
                                            type="file"
                                            className="hidden"
                                            accept="image/*"
                                            onChange={onSelectFile}
                                            disabled={isUploading}
                                        />
                                        <Camera className="h-8 w-8 text-amber-500" />
                                    </label>
                                </div>
                            )}
                        </div>
                        <div className="text-center sm:text-left">
                            <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                                {item.firstName || 'Votre Nom'}
                            </h3>
                            <p className="text-gray-500 dark:text-gray-400 text-sm">
                                {item.profession || 'Votre Profession'}
                            </p>
                            <p className="text-sm text-amber-500 mt-1">
                                Conseil pro: Une photo professionnelle augmente l'impact de votre CV de 40%
                            </p>
                        </div>
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {PERSONAL_INFO_FIELDS.map(({ label, key, icon: Icon }) => (
                            <div key={label} className="flex items-start gap-3">
                                <div className="mt-0.5">
                                    <Icon className="h-5 w-5 text-amber-500" />
                                </div>
                                <div className="flex-1 min-w-0">
                                    <p className="text-sm text-gray-500 dark:text-gray-400 font-medium">
                                        {t(`cv.interface.personal.fields.${key}`, label)}
                                    </p>
                                    <p className="text-base text-gray-900 dark:text-white font-medium">
                                        {item[key] || t('cv.interface.personal.fields.notSpecified', 'Non spécifié')}
                                    </p>
                                </div>
                            </div>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* Photo crop sheet */}
            <Sheet open={isOpen} onOpenChange={setIsOpen}>
                <SheetContent side="right" className="w-full sm:max-w-md p-4">
                    <SheetHeader className="text-left">
                        <SheetTitle className="text-lg">
                            Recadrer votre photo
                        </SheetTitle>
                        <SheetDescription className="text-sm">
                            Faites glisser pour ajuster. Pour de meilleurs résultats, utilisez une photo professionnelle avec un bon éclairage.
                        </SheetDescription>
                    </SheetHeader>
                    <Separator className="my-4" />

                    <ScrollArea className="h-[calc(100vh-10rem)] pr-4">
                        <div className="space-y-4">
                            {uploadedImage && (
                                <ReactCrop
                                    crop={crop}
                                    onChange={c => setCrop(c)}
                                    onComplete={c => setCompletedCrop(c)}
                                    aspect={1}
                                    className="max-w-full"
                                >
                                    <img
                                        ref={setImageRef}
                                        src={uploadedImage}
                                        alt="Upload"
                                        className="max-w-full h-auto"
                                        onLoad={onImageLoad}
                                    />
                                </ReactCrop>
                            )}
                        </div>
                    </ScrollArea>

                    <div className="flex justify-end gap-3 mt-4 sticky bottom-0 bg-white dark:bg-gray-900 pt-4 border-t border-amber-100 dark:border-amber-800">
                        <Button variant="outline" onClick={() => setIsOpen(false)} className="border-amber-200 dark:border-amber-800 hover:bg-amber-50 dark:hover:bg-amber-900/50">
                            Annuler
                        </Button>
                        <Button
                            onClick={handleUpload}
                            disabled={!completedCrop || isUploading}
                            className="bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400"
                        >
                            {isUploading ? "Enregistrement..." : "Enregistrer la photo"}
                        </Button>
                    </div>
                </SheetContent>
            </Sheet>
        </div>
    );
};

// Improved sidebar button with clear visual indicators
const SidebarButton = ({ item, isActive, isComplete, onClick, isMobile }) => {
    const activeClass = "bg-gradient-to-r from-amber-500 to-purple-500 dark:from-amber-400 dark:to-purple-400 text-white shadow-lg";
    const completedClass = "bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-800";
    const inactiveClass = "hover:bg-amber-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-200";

    return (
        <motion.button
            onClick={onClick}
            className={`flex items-center justify-between p-3 rounded-lg transition-all
                ${isActive ? activeClass : isComplete ? completedClass : inactiveClass}
                ${isMobile ? 'w-full justify-center' : 'w-full'} border`}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
        >
            <div className="flex items-center gap-2">
                <item.icon className={`h-5 w-5 ${isActive ? 'text-white' : isComplete ? 'text-amber-500' : item.color}`} />
                {(!isMobile || (isMobile && isActive)) && <span className="font-medium text-sm">{item.label}</span>}
            </div>
            {!isMobile && isComplete && (
                <CheckCircle className="h-4 w-4 text-amber-500" />
            )}
        </motion.button>
    );
}

// Updated navigation with clearer buttons and help text
const SectionNavigation = ({ currentSection, nextSection, prevSection, canProgress, onNavigate }) => {
    return (
        <div className="flex justify-between items-center gap-4 mt-6 pt-4 border-t border-amber-100 dark:border-amber-800">
            {prevSection ? (
                <Button
                    variant="outline"
                    onClick={() => onNavigate(prevSection.id)}
                    className="h-10 flex items-center gap-2 border-amber-200 dark:border-amber-800 hover:bg-amber-50 dark:hover:bg-amber-900/50"
                >
                    <ChevronLeft className="w-4 h-4" />
                    <span>Précédent: {prevSection.label}</span>
                </Button>
            ) : (
                <div></div>
            )}

            {nextSection && (
                <Button
                    onClick={() => onNavigate(nextSection.id)}
                    disabled={!canProgress}
                    className="h-10 flex items-center gap-2 bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400 text-white"
                >
                    <span>Suivant: {nextSection.label}</span>
                    <ChevronRight className="w-4 h-4" />
                </Button>
            )}
        </div>
    );
};

// Main CV interface component
export default function CvInterface({ auth, cvInformation: initialCvInformation }) {
    const { t } = useTranslation();
    const [activeSection, setActiveSection] = useState('personalInfo');
    const [cvInformation, setCvInformation] = useState(initialCvInformation);
    const [isEditing, setIsEditing] = useState(false);
    const [isImporting, setIsImporting] = useState(false);
    const [isMobileView, setIsMobileView] = useState(window.innerWidth < 640);
    const { toast } = useToast();

    // Auto-save functionality (mock implementation)
    const [isSaving, setIsSaving] = useState(false);
    const [lastSaved, setLastSaved] = useState(null);

    // Handle window resize for responsive layout
    useEffect(() => {
        const handleResize = () => setIsMobileView(window.innerWidth < 640);
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // Auto-save effect
    useEffect(() => {
        const autoSave = () => {
            setIsSaving(true);
            // Mock API call for saving
            setTimeout(() => {
                setIsSaving(false);
                setLastSaved(new Date());
                // Here you would make an actual API call to save progress
            }, 1000);
        };

        const saveTimer = setTimeout(autoSave, 30000); // Auto-save every 30 seconds
        return () => clearTimeout(saveTimer);
    }, [cvInformation]);

    const updateCvInformation = useCallback((section, data) => {
        setCvInformation(prev => {
            const newState = { ...prev };
            if (section === 'summaries') {
                newState.summaries = data;
                if (Array.isArray(data) && data.length > 0) {
                    const existingIds = new Set(newState.allsummaries.map(s => s.id));
                    data.forEach(summary => {
                        if (!existingIds.has(summary.id)) {
                            newState.allsummaries.push(summary);
                        } else {
                            const index = newState.allsummaries.findIndex(s => s.id === summary.id);
                            if (index !== -1) {
                                newState.allsummaries[index] = summary;
                            }
                        }
                    });
                }
            } else {
                newState[section] = Array.isArray(data) ? [...data] : { ...data };
            }
            return newState;
        });
    }, []);

    // Simplified completion status tracking
    const completionStatus = {
        personalInfo: Boolean(cvInformation.personalInformation?.firstName),
        summary: cvInformation.summaries?.length > 0,
        experience: cvInformation.experiences?.length > 0,
        competence: cvInformation.competences?.length > 0,
        education: Boolean(cvInformation.myProfession) || Boolean(cvInformation.personalInformation?.full_profession),
    };

    const getCompletionPercentage = () => {
        const completed = Object.values(completionStatus).filter(status => status).length;
        return Math.round((completed / Object.keys(completionStatus).length) * 100);
    };

    const handleEdit = () => setIsEditing(true);
    const handleCancel = () => setIsEditing(false);
    const handleUpdate = (updatedInfo) => {
        updateCvInformation('personalInformation', updatedInfo);
        setIsEditing(false);
        toast({
            title: "Information Updated",
            description: "Your personal information has been saved"
        });
    };

    // Get component for current section
    const getSectionComponent = (sectionId) => {
        switch (sectionId) {
            case 'personalInfo':
                return isEditing ? (
                    <PersonalInformationEdit
                        user={cvInformation.personalInformation}
                        onUpdate={handleUpdate}
                        onCancel={handleCancel}
                    />
                ) : (
                    <PersonalInfoCard
                        item={cvInformation.personalInformation}
                        onEdit={handleEdit}
                        updateCvInformation={updateCvInformation}
                    />
                );
            case 'summary':
                return (
                    <SummaryManager
                        auth={auth}
                        summaries={cvInformation.allsummaries}
                        selectedSummary={cvInformation.summaries}
                        onUpdate={(summaries) => updateCvInformation('summaries', summaries)}
                    />
                );
            case 'competence':
                return (
                    <CompetenceManager
                        auth={auth}
                        availableCompetences={cvInformation.availableCompetences}
                        initialUserCompetences={cvInformation.competences}
                        onUpdate={(competences) => updateCvInformation('competences', competences)}
                    />
                );
            case 'experience':
                return (
                    <ExperienceManager
                        auth={auth}
                        experiences={cvInformation.experiences}
                        categories={cvInformation.experienceCategories}
                        onUpdate={(experiences) => updateCvInformation('experiences', experiences)}
                    />
                );
            case 'education':
                return (
                    <ProfessionManager
                        auth={auth}
                        availableProfessions={cvInformation.availableProfessions}
                        initialUserProfession={cvInformation.myProfession}
                        onUpdate={(profession, fullProfession) => {
                            setCvInformation(prev => ({
                                ...prev,
                                myProfession: profession || { fullProfession },
                                personalInformation: {
                                    ...prev.personalInformation,
                                    profession: profession ? profession.name : '',
                                    full_profession: fullProfession || ''
                                }
                            }));
                        }}
                    />
                );
            default:
                return <div>Section not found</div>;
        }
    };

    // Navigation helpers
    const currentSectionIndex = SIDEBAR_ITEMS.findIndex(item => item.id === activeSection);
    const nextSection = SIDEBAR_ITEMS[currentSectionIndex + 1];
    const prevSection = SIDEBAR_ITEMS[currentSectionIndex - 1];

    // Import handler with improved user feedback
    const handleImport = async (type) => {
        if (isImporting) return;

        // Check if user has enough credits
        const requiredCredits = type === 'linkedin' ? 8 : 5;
        if (auth.user.wallet_balance < requiredCredits) {
            toast({
                title: "Not Enough Credits",
                description: `You need ${requiredCredits} credits to import from ${type}. You currently have ${auth.user.wallet_balance}.`,
                variant: "destructive"
            });
            return;
        }

        const input = document.createElement('input');
        input.type = 'file';
        input.accept = type === 'pdf' ? '.pdf' : '.docx';

        input.onchange = async (e) => {
            const file = e.target.files?.[0];
            if (!file) return;

            try {
                setIsImporting(true);

                // Multi-step import process with clear feedback
                const importSteps = [
                    { title: "Étape 1/4", description: "Préparation du fichier..." },
                    { title: "Étape 2/4", description: "Lecture du contenu du CV..." },
                    { title: "Étape 3/4", description: "Structuration des informations..." },
                    { title: "Étape 4/4", description: "Finalisation de votre CV..." }
                ];

                // Show step 1
                toast({
                    title: importSteps[0].title,
                    description: importSteps[0].description
                });

                const formData = new FormData();
                formData.append('cv', file);

                // Short delay for UX purposes
                await new Promise(resolve => setTimeout(resolve, 800));

                // Show step 2
                toast({
                    title: importSteps[1].title,
                    description: importSteps[1].description
                });

                // Short delay for UX purposes
                await new Promise(resolve => setTimeout(resolve, 1200));

                // Show step 3
                toast({
                    title: importSteps[2].title,
                    description: importSteps[2].description
                });

                try {
                    const response = await axios.post(
                        '/api/cv/analyze',
                        formData,
                        {
                            headers: {
                                'Content-Type': 'multipart/form-data'
                            },
                            timeout: 60000,
                        }
                    );

                    // Show step 4
                    toast({
                        title: importSteps[3].title,
                        description: importSteps[3].description
                    });

                    await new Promise(resolve => setTimeout(resolve, 800));

                    if (response.data.success) {
                        // Update all sections with imported data
                        if (response.data.cvData.personalInformation)
                            updateCvInformation('personalInformation', response.data.cvData.personalInformation);
                        if (response.data.cvData.summaries)
                            updateCvInformation('summaries', response.data.cvData.summaries);
                        if (response.data.cvData.competences)
                            updateCvInformation('competences', response.data.cvData.competences);
                        if (response.data.cvData.experiences)
                            updateCvInformation('experiences', response.data.cvData.experiences);
                        if (response.data.cvData.myProfession)
                            updateCvInformation('myProfession', response.data.cvData.myProfession);

                        toast({
                            title: "Importation terminée !",
                            description: "Les informations de votre CV ont été importées avec succès",
                            variant: "success"
                        });
                    }
                } catch (error) {
                    console.error("Import error:", error);

                    toast({
                        title: "Échec de l'importation",
                        description: "Nous n'avons pas pu traiter votre fichier. Veuillez essayer un autre fichier ou saisir les informations manuellement.",
                        variant: "destructive"
                    });
                }
            } finally {
                setIsImporting(false);
            }
        };

        input.click();
    };

    // Render mobile navigation tabs for smaller screens
    const renderMobileNavigation = () => {
        return (
            <div className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-amber-100 dark:border-amber-800 p-2 sm:hidden">
                <div className="flex justify-between items-center">
                    {SIDEBAR_ITEMS.map((item) => (
                        <button
                            key={item.id}
                            onClick={() => setActiveSection(item.id)}
                            className={`flex flex-col items-center justify-center p-1 rounded-md ${
                                activeSection === item.id
                                    ? 'text-amber-500 bg-amber-50 dark:bg-amber-900/20'
                                    : 'text-gray-500'
                            }`}
                        >
                            <item.icon className="h-5 w-5" />
                            <span className="text-xs mt-1">{item.id === activeSection ? item.label.split(' ')[0] : ''}</span>
                            {completionStatus[item.id] && (
                                <div className="absolute top-1 right-1 w-2 h-2 bg-amber-500 rounded-full"></div>
                            )}
                        </button>
                    ))}
                </div>
            </div>
        );
    };

    return (
        <AuthenticatedLayout user={auth.user}>
            <Head title="CV Builder" />

            <div className="min-h-screen bg-gradient-to-b from-amber-50/50 to-purple-50/50 dark:from-gray-900 dark:to-gray-800">
                <div className="container mx-auto py-4 px-4 pb-16 sm:pb-4">
                    {/* Header with clear title and progress */}
                    <div className="flex justify-between items-center mb-4">
                        <div className="flex items-center gap-2">
                            <Sparkles className="h-6 w-6 text-amber-500 dark:text-amber-400" />
                            <h1 className="font-bold text-xl bg-gradient-to-r from-amber-500 to-purple-500 dark:from-amber-400 dark:to-purple-400 text-transparent bg-clip-text">
                                Créateur de CV
                            </h1>
                        </div>

                        <div className="flex items-center gap-4">
                            {/* Show last saved time if available */}
                            {lastSaved && (
                                <div className="text-xs text-gray-500 dark:text-gray-400">
                                    {isSaving ? 'Enregistrement...' : `Dernier enregistrement: ${lastSaved.toLocaleTimeString()}`}
                                </div>
                            )}

                            <Link href={route('userCvModels.index')}>
                                <Button className="bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400 text-white">
                                    <Star className="mr-2 h-4 w-4" />
                                    <span>Choisir un modèle</span>
                                </Button>
                            </Link>
                        </div>
                    </div>

                    {/* Step indicator */}
                    <StepIndicator
                        currentStep={currentSectionIndex}
                        totalSteps={SIDEBAR_ITEMS.length}
                    />

                    {/* Welcome card with progress and import */}
                    <WelcomeCard
                        percentage={getCompletionPercentage()}
                        onImport={handleImport}
                        isImporting={isImporting}
                    />

                    {/* Main content area */}
                    <Card className="shadow-md border border-amber-100 dark:border-amber-800">
                        <CardHeader className="bg-white dark:bg-gray-900 border-b border-amber-100 dark:border-amber-800 p-4">
                            <div className="flex items-center justify-between">
                                <div>
                                    <CardTitle className="text-xl font-bold bg-gradient-to-r from-amber-500 to-purple-500 dark:from-amber-400 dark:to-purple-400 text-transparent bg-clip-text">
                                        {SIDEBAR_ITEMS.find(item => item.id === activeSection)?.label || 'Sections du CV'}
                                    </CardTitle>
                                    <CardDescription className="text-sm text-gray-500 dark:text-gray-400">
                                        {activeSection === 'personalInfo' && "Commencez par vos informations de base et vos coordonnées"}
                                        {activeSection === 'summary' && "Rédigez un bref résumé professionnel pour mettre en valeur vos points forts"}
                                        {activeSection === 'experience' && "Ajoutez votre parcours professionnel avec des réalisations spécifiques"}
                                        {activeSection === 'competence' && "Listez vos compétences clés pertinentes pour le poste visé"}
                                        {activeSection === 'education' && "Incluez votre formation et vos qualifications"}
                                    </CardDescription>
                                </div>
                            </div>
                        </CardHeader>

                        <div className="flex flex-col md:flex-row min-h-[500px]">
                            {/* Desktop sidebar */}
                            <div className="hidden md:block w-64 flex-shrink-0 border-r border-amber-100 dark:border-amber-800 bg-white/50 dark:bg-gray-900/50">
                                <ScrollArea className="h-full py-3">
                                    <nav className="p-3 space-y-2">
                                        {SIDEBAR_ITEMS.map(item => (
                                            <SidebarButton
                                                key={item.id}
                                                item={item}
                                                isActive={activeSection === item.id}
                                                isComplete={completionStatus[item.id]}
                                                onClick={() => setActiveSection(item.id)}
                                                isMobile={false}
                                            />
                                        ))}
                                    </nav>
                                </ScrollArea>
                            </div>

                            {/* Main content with animated transitions */}
                            <div className="flex-grow p-4 sm:p-5 overflow-x-hidden bg-white dark:bg-gray-900">
                                <AnimatePresence mode="wait">
                                    <motion.div
                                        key={activeSection}
                                        initial={{ opacity: 0, x: 20 }}
                                        animate={{ opacity: 1, x: 0 }}
                                        exit={{ opacity: 0, x: -20 }}
                                        transition={{ duration: 0.3 }}
                                        className="space-y-4"
                                    >
                                        {getSectionComponent(activeSection)}

                                        <SectionNavigation
                                            currentSection={activeSection}
                                            nextSection={nextSection}
                                            prevSection={prevSection}
                                            canProgress={completionStatus[activeSection]}
                                            onNavigate={setActiveSection}
                                        />
                                    </motion.div>
                                </AnimatePresence>
                            </div>
                        </div>
                    </Card>

                    {/* Helpful tips section */}
                    <div className="mt-6 bg-gradient-to-r from-amber-50 to-purple-50 dark:from-gray-800 dark:to-gray-900 p-4 rounded-lg border border-amber-100 dark:border-amber-800">
                        <h3 className="font-bold text-lg text-gray-900 dark:text-white mb-2">
                            Conseils pour un CV parfait
                        </h3>
                        <ul className="text-sm text-gray-700 dark:text-gray-300 space-y-2">
                            <li className="flex items-start gap-2">
                                <CheckCircle className="h-4 w-4 text-amber-500 mt-1 flex-shrink-0" />
                                <span>Limitez votre CV à 1-2 pages pour une lisibilité optimale</span>
                            </li>
                            <li className="flex items-start gap-2">
                                <CheckCircle className="h-4 w-4 text-amber-500 mt-1 flex-shrink-0" />
                                <span>Mettez l'accent sur vos réalisations plutôt que sur vos responsabilités</span>
                            </li>
                            <li className="flex items-start gap-2">
                                <CheckCircle className="h-4 w-4 text-amber-500 mt-1 flex-shrink-0" />
                                <span>Utilisez des mots-clés de l'offre d'emploi pour passer les systèmes ATS</span>
                            </li>
                        </ul>
                    </div>

                    {/* Final call to action */}
                    <div className="mt-6 text-center">
                        <Link href={route('userCvModels.index')}>
                            <Button className="bg-gradient-to-r from-amber-500 to-purple-500 hover:from-amber-600 hover:to-purple-600 dark:from-amber-400 dark:to-purple-400 text-white p-4 rounded-lg shadow-lg group">
                                <div className="flex items-center gap-2">
                                    <Star className="h-5 w-5 group-hover:animate-spin" />
                                    <span className="text-base font-medium">
                                        Choisir un modèle de CV
                                    </span>
                                    <CircleChevronRight className="h-5 w-5" />
                                </div>
                            </Button>
                        </Link>
                    </div>
                </div>

                {/* Mobile navigation tabs */}
                {isMobileView && renderMobileNavigation()}
            </div>
        </AuthenticatedLayout>
    );
}

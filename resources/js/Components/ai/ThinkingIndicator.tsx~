import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, Brain } from 'lucide-react';

// Composant d'animation de réflexion de l'IA plus sophistiqué et compact
const ThinkingAnimation = ({ message, style }) => {
    const [phase, setPhase] = useState(0);
    const colors = ['#f59e0b', '#8b5cf6', '#ec4899']; // Ambre, violet, rose

    useEffect(() => {
        const interval = setInterval(() => {
            setPhase(prev => (prev + 1) % 4);
        }, 800);
        return () => clearInterval(interval);
    }, []);

    return (
        <div
            className="flex items-center gap-2 py-1.5 pl-2 pr-3 rounded-full bg-white/60 dark:bg-gray-800/60 backdrop-blur-sm border border-gray-100 dark:border-gray-700 shadow-sm"
            style={style}
        >
            <div className="relative flex items-center justify-center w-5 h-5">
                {/* Cercle extérieur pulsant */}
                <motion.div
                    initial={{ opacity: 0.4, scale: 0.8 }}
                    animate={{
                        opacity: [0.2, 0.4, 0.2],
                        scale: [0.8, 1.1, 0.8],
                    }}
                    transition={{ duration: 1.5, repeat: Infinity, ease: "easeInOut" }}
                    className="absolute inset-0 rounded-full bg-gradient-to-r from-amber-500/20 to-purple-500/20"
                />

                {/* Icône centrale qui change */}
                <AnimatePresence mode="wait">
                    <motion.div
                        key={phase}
                        initial={{ opacity: 0, scale: 0.6, rotate: -10 }}
                        animate={{ opacity: 1, scale: 1, rotate: 0 }}
                        exit={{ opacity: 0, scale: 0.6, rotate: 10 }}
                        transition={{ duration: 0.3 }}
                    >
                        {phase === 0 && <Brain className="h-3.5 w-3.5 text-amber-500" />}
                        {phase === 1 && <Sparkles className="h-3.5 w-3.5 text-purple-500" />}
                        {phase === 2 && <Brain className="h-3.5 w-3.5 text-amber-500" />}
                        {phase === 3 && <Sparkles className="h-3.5 w-3.5 text-purple-500" />}
                    </motion.div>
                </AnimatePresence>
            </div>

            {/* Texte avec transition */}
            <AnimatePresence mode="wait">
                <motion.span
                    key={message}
                    initial={{ opacity: 0, y: 5 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -5 }}
                    transition={{ duration: 0.3 }}
                    className="text-xs font-medium text-gray-700 dark:text-gray-300"
                >
                    {message}
                </motion.span>
            </AnimatePresence>

            {/* Points de chargement */}
            <div className="flex space-x-1">
                {[0, 1, 2].map((i) => (
                    <motion.div
                        key={i}
                        animate={{
                            scale: phase % 3 === i ? 1.2 : 0.8,
                            opacity: phase % 3 === i ? 1 : 0.5,
                            backgroundColor: colors[phase % 3]
                        }}
                        transition={{ duration: 0.3 }}
                        className="w-1.5 h-1.5 rounded-full"
                    />
                ))}
            </div>
        </div>
    );
};

// Composant principal d'animation de réflexion compact
const ThinkingIndicator = ({ messages, currentIndex }) => {
    return (
        <div className="flex flex-col items-start space-y-2 max-w-[90%] sm:max-w-[70%] md:max-w-[60%]">
            {/* Animation de réflexion principale */}
            <ThinkingAnimation
                message={messages[currentIndex]}
                style={{ marginBottom: '4px' }}
            />

            {/* Indicateur de progression */}
            <motion.div
                className="w-full bg-gray-100 dark:bg-gray-800 h-1 rounded-full overflow-hidden"
            >
                <motion.div
                    initial={{ width: '5%' }}
                    animate={{
                        width: ['5%', '30%', '45%', '65%', '85%', '95%'],
                    }}
                    transition={{
                        duration: 10,
                        ease: "easeInOut",
                        times: [0, 0.2, 0.4, 0.6, 0.8, 1],
                        repeat: Infinity,
                        repeatType: "reverse"
                    }}
                    className="h-full bg-gradient-to-r from-amber-500 to-purple-500 rounded-full"
                />
            </motion.div>
        </div>
    );
};

export default ThinkingIndicator;
